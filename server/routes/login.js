// routes/auth.js

const express = require("express");
const passport = require("passport");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const db = require("../db.js"); // рддреБрдордЪреНрдпрд╛ рдбреЗрдЯрд╛рдмреЗрд╕ рдХрдиреЗрдХреНрд╢рдирд╕рд╛рдареА
const router = express.Router();
const seedAchievementsForUser = require('../services/seedAchievementsForUser.js');
const updateAchievements = require('../services/updateAchievements.js');
// const authController = require("../controllers/authController.js"); // ЁЯСИ рдЖрддрд╛ рдпрд╛рдЪреА рдЧрд░рдЬ рдирд╛рд╣реА, рд▓реЙрдЬрд┐рдХ рдЗрдереЗрдЪ ре▓рдб рдХрд░рдд рдЖрд╣реЛрдд
const { sendOtpEmail } = require("../utils/sendEmail.js"); // ЁЯУз рдИрдореЗрд▓ рдкрд╛рдард╡рдгреНрдпрд╛рд╕рд╛рдареА

// --- SIGNUP ---
router.post("/signup", async(req, res) => {
    // ... рддреБрдордЪрд╛ рд╕рдзреНрдпрд╛рдЪрд╛ SIGNUP рдХреЛрдб ...
    const { name, email, password } = req.body;

    if (!name || !email || !password) {
        return res.status(400).json({ message: "All fields required" });
    }

    try {
        const [existing] = await db.query("SELECT * FROM users WHERE email = ?", [email]);
        if (existing.length > 0) return res.status(400).json({ message: "User already exists" });

        const hashedPassword = await bcrypt.hash(password, 10);

        const role = email.toLowerCase().includes("admin") ? "admin" : "user";

        const [result] = await db.query(
            "INSERT INTO users (name, email, password, role) VALUES (?, ?, ?, ?)", [name, email, hashedPassword, role]
        );

        await seedAchievementsForUser(result.insertId);

        res.status(201).json({ message: `${role} account created successfully` });
    } catch (err) {
        console.error(err);
        res.status(500).json({ message: "Server error" });
    }
});

// --- LOGIN ---
router.post("/login", async(req, res) => {
    // ... рддреБрдордЪрд╛ рд╕рдзреНрдпрд╛рдЪрд╛ LOGIN рдХреЛрдб ...
    const { email, password } = req.body;

    if (!email || !password) return res.status(400).json({ message: "Email and password required" });

    try {
        const [rows] = await db.query("SELECT * FROM users WHERE email = ?", [email]);
        if (rows.length === 0) return res.status(400).json({ message: "Invalid credentials" });

        const user = rows[0];
        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) return res.status(400).json({ message: "Invalid credentials" });

        const role = email.toLowerCase().includes("admin") ? "admin" : "user";
        if (user.role !== role) {
            await db.query("UPDATE users SET role = ? WHERE id = ?", [role, user.id]);
            user.role = role;
        }

        // JWT
        const token = jwt.sign({ id: user.id, email: user.email, role: user.role },
            process.env.JWT_SECRET, { expiresIn: "1h" }
        );

        res.json({
            token,
            user: { id: user.id, name: user.name, email: user.email, role: user.role }
        });
    } catch (err) {
        console.error(err);
        res.status(500).json({ message: "Server error" });
    }
});

// ------------------------------------------
// --- FORGOT PASSWORD (OTP FLOW) ---
// ------------------------------------------

// 1. FORGOT PASSWORD (OTP Generate рдЖрдгрд┐ Console рд╡рд░ рдкреНрд░рд┐рдВрдЯ рдХрд░рдгреЗ)
// routes/auth.js

// ... [рдЗрддрд░ рдЖрд╡рд╢реНрдпрдХ рдЗрдореНрдкреЛрд░реНрдЯреНрд╕, рдЬрд╕реЗ рдХреА db рдЖрдгрд┐ sendOtpEmail] ...

// router.post("/forgot-password", async (req, res) => {
//     const { email } = req.body;

//     try {
//         const [userRows] = await db.query("SELECT * FROM users WHERE email = ?", [email]);

//         if (userRows.length === 0) {
//             console.log(`Attempted OTP generation for non-existent email: ${email}`);
//             // рдЯреЗрд╕реНрдЯрд┐рдВрдЧрд╕рд╛рдареА, рдиреЙрди-рдПрдЧреНрдЭрд┐рд╕реНрдЯрдВрдЯ рдИрдореЗрд▓рд╕рд╛рдареАрд╣реА alert рджреЗрдК рдирдХрд╛
//             return res.json({ message: "If account exists, OTP has been generated." });
//         }

//         const otp = Math.floor(100000 + Math.random() * 900000); // 6-digit OTP
//         const expiryTime = Date.now() + 10 * 60 * 1000; // 10 рдорд┐рдирд┐рдЯрд╛рдВрд╕рд╛рдареА

//         // 1. рдбреЗрдЯрд╛рдмреЗрд╕рдордзреНрдпреЗ OTP рдЖрдгрд┐ рдореБрджрдд рд╕реЗрд╡реНрд╣ рдХрд░рдгреЗ
//         await db.query(
//             "UPDATE users SET otp = ?, otp_expires = ? WHERE email = ?",
//             [otp.toString(), expiryTime, email]
//         );

//         // 2. ЁЯУз рдИрдореЗрд▓рдордзреНрдпреЗ OTP рдкрд╛рдард╡рдгреЗ
//         const emailSent = await sendOtpEmail(email, otp.toString()); 

//         // 3. тЬЕ рдХрдиреНрд╕реЛрд▓рдордзреНрдпреЗ OTP рдкреНрд░рд┐рдВрдЯ рдХрд░рдгреЗ (Debugging рд╕рд╛рдареА)
//         console.log(`\n\nтЬЕ OTP for ${email} (Sent to Email): ${otp}\n\n`);

//         let responseMessage = "OTP has been sent to your email address.";

//         if (!emailSent) {
//             responseMessage = "OTP saved, but failed to send email. Please check server logs.";
//         }

//         // 4. ЁЯЪи ре▓рд▓рд░реНрдЯ рдмреЙрдХреНрд╕рдордзреНрдпреЗ OTP рджрд╛рдЦрд╡рдгреНрдпрд╛рд╕рд╛рдареА (Testing рд╕рд╛рдареА)
//         // рдпреЗрдереЗ рдореА response object рдордзреНрдпреЗ 'testOtp' рдирд╛рд╡рд╛рдЪрд╛ рдПрдХ рддрд╛рддреНрдкреБрд░рддрд╛ рдлреАрд▓реНрдб ре▓рдб рдХрд░рдд рдЖрд╣реЗ.
//         // рдлреНрд░рдВрдЯрдПрдВрдбрдордзреНрдпреЗ (ForgotPassword.jsx) рддреБрдореНрд╣рд╛рд▓рд╛ рд╣рд╛ рдлреАрд▓реНрдб рд╡рд╛рдЪреВрди alert рджрд╛рдЦрд╡рд╛рд╡рд╛ рд▓рд╛рдЧреЗрд▓.

//         res.json({ 
//             message: responseMessage,
//             testOtp: otp.toString() // ЁЯСИ рдЯреЗрд╕реНрдЯрд┐рдВрдЧрд╕рд╛рдареА рдлреНрд░рдВрдЯрдПрдВрдбрд▓рд╛ рдкрд╛рдард╡рдд рдЖрд╣реЛрдд
//         });

//     } catch (err) {
//         console.error("Error in forgot-password:", err);
//         res.status(500).json({ message: "Server error during OTP generation or saving." });
//     }
// });

router.post("/forgot-password", async(req, res) => {
    const { email } = req.body;

    try {
        const [userRows] = await db.query("SELECT * FROM users WHERE email = ?", [email]);

        // ЁЯЫС рдмрджрд▓ рдпреЗрдереЗ рдЖрд╣реЗ: рдЬрд░ рдпреВрдЬрд░ рдирд╕реЗрд▓, рддрд░ рд╕реНрдкрд╖реНрдЯрдкрдгреЗ рдПрд░рд░ рдореЗрд╕реЗрдЬ рдкрд░рдд рдкрд╛рдард╡рд╛
        if (userRows.length === 0) {
            console.log(`Email not found in database: ${email}`);
            // 400 status рдЖрдгрд┐ рд╕реНрдкрд╖реНрдЯ рд╕рдВрджреЗрд╢ рдкрд░рдд рдкрд╛рдард╡рд╛
            return res.status(400).json({ message: "This email address is not associated with any account." });
            // рдХрд┐рдВрд╡рд╛ 'рд╣реЗ рдЦрд╛рддреЗ рдЕрд╕реНрддрд┐рддреНрд╡рд╛рдд рдирд╛рд╣реА' рдпрд╛рд╕рд╛рдареА:
            // return res.status(400).json({ message: "рд╣реЗ рдИрдореЗрд▓ ре▓рдбреНрд░реЗрд╕ рдХреЛрдгрддреНрдпрд╛рд╣реА рдЦрд╛рддреНрдпрд╛рд╢реА рдЬреЛрдбрд▓реЗрд▓реЗ рдирд╛рд╣реА." });
        }
        // ---------------------------------------------------------------------------------

        const otp = Math.floor(100000 + Math.random() * 900000); // 6-digit OTP
        const expiryTime = Date.now() + 10 * 60 * 1000; // 10 рдорд┐рдирд┐рдЯрд╛рдВрд╕рд╛рдареА

        // 1. рдбреЗрдЯрд╛рдмреЗрд╕рдордзреНрдпреЗ OTP рдЖрдгрд┐ рдореБрджрдд рд╕реЗрд╡реНрд╣ рдХрд░рдгреЗ
        await db.query(
            "UPDATE users SET otp = ?, otp_expires = ? WHERE email = ?", [otp.toString(), expiryTime, email]
        );

        // 2. ЁЯУз рдИрдореЗрд▓рдордзреНрдпреЗ OTP рдкрд╛рдард╡рдгреЗ
        const emailSent = await sendOtpEmail(email, otp.toString());

        // 3. тЬЕ рдХрдиреНрд╕реЛрд▓рдордзреНрдпреЗ OTP рдкреНрд░рд┐рдВрдЯ рдХрд░рдгреЗ (Debugging рд╕рд╛рдареА)
        console.log(`\n\nтЬЕ OTP for ${email} (Sent to Email): ${otp}\n\n`);

        let responseMessage = "OTP has been sent to your email address.";

        if (!emailSent) {
            responseMessage = "OTP saved, but failed to send email. Please check server logs.";
        }

        // 4. ЁЯЪи ре▓рд▓рд░реНрдЯ рдмреЙрдХреНрд╕рдордзреНрдпреЗ OTP рджрд╛рдЦрд╡рдгреНрдпрд╛рд╕рд╛рдареА (Testing рд╕рд╛рдареА)
        res.json({
            message: responseMessage,
            testOtp: otp.toString() // рдЯреЗрд╕реНрдЯрд┐рдВрдЧрд╕рд╛рдареА рдлреНрд░рдВрдЯрдПрдВрдбрд▓рд╛ рдкрд╛рдард╡рдд рдЖрд╣реЛрдд
        });

    } catch (err) {
        console.error("Error in forgot-password:", err);
        res.status(500).json({ message: "Server error during OTP generation or saving." });
    }
});

// ... (verify-otp рдЖрдгрд┐ reset-password рд░рд╛рдЙрдЯреНрд╕ рддрд╕реЗрдЪ рд░рд╛рд╣рддреАрд▓)
// 2. VERIFY OTP (OTP рддрдкрд╛рд╕рдгреЗ)
router.post("/verify-otp", async(req, res) => {
    const { email, otp } = req.body;

    try {
        // ЁЯТб рдбреЗрдЯрд╛рдмреЗрд╕рдордзреНрдпреЗ рджрд┐рд▓реЗрд▓рд╛ OTP, рдИрдореЗрд▓ рдЖрдгрд┐ рдореБрджрдд рд╕рдВрдкрд▓реЗрд▓реА рдирд╛рд╣реА (otp_expires > NOW()) рдпрд╛рдЪреА рдкрдбрддрд╛рд│рдгреА рдХрд░рдгреЗ
        const [rows] = await db.query(
            "SELECT id FROM users WHERE email = ? AND otp = ? AND otp_expires > ?", [email, otp, Date.now()]
        );

        if (rows.length === 0) {
            return res.status(400).json({ message: "Invalid or expired OTP." });
        }

        // OTP verified рдЭрд╛рд▓реНрдпрд╛рд╡рд░, рдирд╡реАрди рдкрд╛рд╕рд╡рд░реНрдб рд╕реЗрдЯ рдХрд░рдгреНрдпрд╛рд╕рд╛рдареА рдпреВрдЬрд░рд▓рд╛ 'verified' рдареЗрд╡рдгреНрдпрд╛рд╕рд╛рдареА
        // рдЖрдкрдг OTP рдЖрдгрд┐ expiry рдлреАрд▓реНрдб рддрд╕реЗрдЪ рдареЗрд╡реВ рд╢рдХрддреЛ рдХрд┐рдВрд╡рд╛ рдПрдХ рддрд╛рддреНрдкреБрд░рддреЗ 'verified' рд╕реНрдЯреЗрдЯрд╕ рд╕реЗрдЯ рдХрд░реВ рд╢рдХрддреЛ.
        // рд╕рд╛рдзреЗрдкрдгрд╛рд╕рд╛рдареА, рдЖрдкрдг рдлрдХреНрдд OK рд░рд┐рд╕реНрдкреЙрдиреНрд╕ рджреЗрдК, рдЖрдгрд┐ reset-password рдордзреНрдпреЗ рдИрдореЗрд▓ рдЖрдгрд┐ рдЖрдзреА verify рдЭрд╛рд▓реЗрд▓рд╛ OTP рд╡рд╛рдкрд░реВ.

        res.json({ message: "OTP verified successfully. You can now reset your password." });
    } catch (err) {
        console.error("Error in verify-otp:", err);
        res.status(500).json({ message: "Server error during OTP verification." });
    }
});

// 3. RESET PASSWORD (рдирд╡реАрди рдкрд╛рд╕рд╡рд░реНрдб рд╕реЗрдЯ рдХрд░рдгреЗ)
router.post("/reset-password", async(req, res) => {
    const { email, otp, newPassword } = req.body; // рдлреНрд░рдВрдЯрдПрдВрдбрдХрдбреВрди OTP рдШреЗрдгреЗ рдЖрд╡рд╢реНрдпрдХ рдЖрд╣реЗ

    try {
        // ЁЯТб рдкреБрдиреНрд╣рд╛ OTP рдЖрдгрд┐ рдореБрджрдд рддрдкрд╛рд╕реВрди, рдордЧрдЪ рдкрд╛рд╕рд╡рд░реНрдб рдЕрдкрдбреЗрдЯ рдХрд░рдгреЗ
        const [rows] = await db.query(
            "SELECT id FROM users WHERE email = ? AND otp = ? AND otp_expires > ?", [email, otp, Date.now()]
        );

        if (rows.length === 0) {
            return res.status(400).json({ message: "Verification failed. Please try the forgot password process again." });
        }

        const hashedPassword = await bcrypt.hash(newPassword, 10);

        // ЁЯТб рдкрд╛рд╕рд╡рд░реНрдб рдЕрдкрдбреЗрдЯ рдХрд░рдгреЗ рдЖрдгрд┐ OTP/expiry рдлреАрд▓реНрдб рд╕рд╛рдл рдХрд░рдгреЗ (Resetting the fields)
        await db.query(
            "UPDATE users SET password = ?, otp = NULL, otp_expires = NULL WHERE email = ?", [hashedPassword, email]
        );

        res.json({ message: "Password updated successfully!" });
    } catch (err) {
        console.error("Error in reset-password:", err);
        res.status(500).json({ message: "Server error during password reset." });
    }
});

module.exports = router;